{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","url","xhr","XMLHttpRequest","responseType","open","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","setRequestHeader","onload","response","status","onerror","e","send","ActionBTN","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleServerResponse","console","log","type","onClick","event","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","path","window","location","pathname","idRegex","match","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","href","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","alert","handleDidRetweet","newTweet","updatedTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","onSubmit","newVal","current","value","ref","required","TweetsComponents","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookUp","setTweet","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","StrictMode","createElement","tweetEl","dataset","tweetDetailElements","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,gLCgBpC,SAASC,EAAcC,EAAQC,EAAUC,EAAUC,GACxD,IAAIC,EAEAD,IACFC,EAAWC,KAAKC,UAAUH,IAE5B,IAAMI,EAAG,mCAA+BN,GAClCO,EAAM,IAAIC,eAChBD,EAAIE,aAAc,OAClBF,EAAIG,KAAKX,EAAQO,GACjB,IAAMK,EA1BR,SAAmBC,GACjB,IAAIC,EAAc,KAClB,GAAIC,SAASC,QAA8B,KAApBD,SAASC,OAE9B,IADA,IAAIC,EAAUF,SAASC,OAAOE,MAAM,KAC3BC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACvC,IAAIH,EAASC,EAAQE,GAAGE,OAExB,GAAIL,EAAOM,UAAU,EAAGT,EAAKO,OAAS,KAAQP,EAAO,IAAM,CACzDC,EAAcS,mBAAmBP,EAAOM,UAAUT,EAAKO,OAAS,IAChE,OAIN,OAAON,EAaWU,CAAU,aAC5BhB,EAAIiB,iBAAiB,eAAgB,oBAEjCb,GAAwB,SAAXZ,IAEfQ,EAAIiB,iBAAiB,mBAAoB,kBACzCjB,EAAIiB,iBAAiB,cAAeb,IAGtCJ,EAAIkB,OAAS,WACXxB,EAASM,EAAImB,SAAUnB,EAAIoB,SAE7BpB,EAAIqB,QAAU,SAASC,GACrB5B,EAAS,CAAC,QAAW,sBAAuB,MAE9CM,EAAIuB,KAAK3B,GCrCJ,SAAS4B,EAAUC,GAAQ,IACvBC,EAAmCD,EAAnCC,MAAOC,EAA4BF,EAA5BE,OAAQC,EAAoBH,EAApBG,iBAChBC,EAAQH,EAAMG,MAAQH,EAAMG,MAAQ,EAEpCC,EAAYL,EAAMK,UAAYL,EAAMK,UAAY,yBAChDC,EAAgBJ,EAAOK,QAAUL,EAAOK,QAAU,SAElDC,EAAuB,SAACd,EAAUC,GACtCc,QAAQC,IAAIhB,GACZe,QAAQC,IAAIf,GACI,MAAXA,GAA4B,MAAVA,IAAkBQ,GACvCA,EAAiBT,EAAUC,IAUzBY,EAA0B,SAAhBL,EAAOS,KAAP,UAA4BP,EAA5B,YAAqCE,GAAkBA,EAEvE,OAAO,4BAAQD,UAAWA,EAAWO,QARjB,SAACC,GACjBA,EAAMC,iBCdgB,SAASC,EAASb,EAAQjC,GAEpDH,EAAc,OAAQ,kBAAmBG,EAD5B,CAAC+C,GAAID,EAASb,OAAQA,IDc/Be,CAAehB,EAAMe,GAAId,EAAOS,KAAMH,GACtCC,QAAQC,IAAIR,EAAOS,QAKhB,IAAsDJ,EAAtD,K,yBExBJ,SAASW,EAAYlB,GAAQ,IACzBC,EAASD,EAATC,MACP,OAAOA,EAAMkB,OAAS,yBAAKd,UAAU,OACnC,yBAAKA,UAAU,qCACb,uBAAGA,UAAU,yBAAb,WACA,kBAACe,EAAD,CAAOC,aAAW,EAAChB,UAAW,IAAKJ,MAAOA,EAAMkB,WAE7C,KAGF,SAASC,EAAMpB,GAAQ,IACrBC,EAAmCD,EAAnCC,MAAOqB,EAA4BtB,EAA5BsB,WAAYD,EAAgBrB,EAAhBqB,YADC,EAEWE,mBAASvB,EAAMC,MAAQD,EAAMC,MAAQ,MAFhD,mBAEpBuB,EAFoB,KAEPC,EAFO,KAGrBpB,EAAYL,EAAMK,UAAYL,EAAMK,UAAY,0BAKhDqB,EAAOC,OAAOC,SAASC,SACzBC,EAAO,YAAG,WAAH,aACLC,EAAQL,EAAKK,MAAMD,GACnBE,EAAaD,EAAQA,EAAME,OAAOC,SAAW,EAG7CC,EAAW,UAAGlC,EAAMe,MAAT,UAAqBgB,GAQhCI,EAAsB,SAACC,EAAgB1C,GAC5B,MAAXA,EACF8B,EAAeY,GACK,MAAX1C,GACL2B,GACFA,EAAWe,IAKjB,OAAO,yBAAKhC,UAAaA,GACvB,6BACE,2BAAIJ,EAAMe,GAAV,MAAiBf,EAAMqC,SACvB,kBAACpB,EAAD,CAAajB,MAAOA,KAErB,yBAAKI,UAAU,iBACbmB,IAA+B,IAAhBH,GAA0B,kBAAC,IAAMkB,SAAP,KACtC,kBAACxC,EAAD,CAAWE,MAAOuB,EAAarB,iBAAkBiC,EAAsBlC,OAnC5D,CAACS,KAAM,OAAQJ,QAAQ,WAoClC,kBAACR,EAAD,CAAWE,MAAOuB,EAAarB,iBAAkBiC,EAAsBlC,OAnC1D,CAACS,KAAM,SAAUJ,QAAQ,aAoCtC,kBAACR,EAAD,CAAWE,MAAOuB,EAAarB,iBAAkBiC,EAAsBlC,OAnCzD,CAACS,KAAM,UAAWJ,QAAQ,eAsC9B,IAAb4B,EAAoB,KAAO,4BAAQ9B,UAAU,iCAAiCO,QA3BhE,SAACC,GAChBA,EAAMC,iBACNa,OAAOC,SAASY,KAAhB,WAA2BvC,EAAMe,MAyBL,UCrD5B,SAASyB,EAAWzC,GAAQ,IAAD,EACKuB,mBAAS,IADd,mBACxBmB,EADwB,KACZC,EADY,OAEHpB,mBAAS,IAFN,mBAExBqB,EAFwB,KAEhBC,EAFgB,OAGStB,oBAAS,GAHlB,mBAGxBuB,EAHwB,KAGVC,EAHU,KAK/BC,qBAAU,WACN,IAAIC,EAAQ,YAAIjD,EAAMkD,WAAWC,OAAOT,GACpCO,EAAM9D,SAAWyD,EAAOzD,QACxB0D,EAAUI,KAGf,CAACjD,EAAMkD,UAAWN,EAAQF,IAE7BM,qBAAU,WAER,IAAqB,IAAjBF,EAAwB,EFRN,SAASM,EAAUnF,GAC3C,IAAID,EAAW,UACXoF,IACApF,EAAQ,4BAAwBoF,IAEpCtF,EAAc,MAAOE,EAAUC,GEY3BoF,CAAarD,EAAMoD,UARc,SAAC1D,EAAUC,GAC3B,MAAXA,GACAgD,EAAcjD,GACdqD,GAAgB,IAElBO,MAAM,4BAKX,CAACZ,EAAYI,EAAcC,EAAiB/C,EAAMoD,WAErD,IAAMG,EAAmB,SAACC,GACxB,IAAMC,EAAiB,YAAOf,GAC9Be,EAAkBC,QAAQF,GAC1Bb,EAAcc,GAEd,IAAME,EAAiB,YAAOf,GAC9Be,EAAkBD,QAAQF,GAC1BX,EAAUc,IAGZ,OAAOf,EAAOgB,KAAI,SAACC,EAAMC,GACvB,OAAO,kBAAC1C,EAAD,CACPnB,MAAO4D,EACPvC,WAAYiC,EACZlD,UAAU,sCAAsC0D,IAAG,UAAKD,EAAL,oBC3ClD,SAASE,EAAYhE,GAC1B,IAAMiE,EAAcC,IAAMC,YACnBC,EAAYpE,EAAZoE,SAEC5D,EAAuB,SAACd,EAAUC,GAEvB,MAAXA,EACFyE,EAAS1E,IAETe,QAAQC,IAAIhB,GACZ4D,MAAM,sBAaV,OAAO,yBAAKjD,UAAWL,EAAMK,WACrB,0BAAMgE,SAVO,SAACxD,GAClBA,EAAMC,iBACN,IAAMwD,EAASL,EAAYM,QAAQC,MHhBvC1G,EAAc,OAAQ,kBGkBK0C,EHlBwB,CAAC8B,QGkBjCgC,IAEfL,EAAYM,QAAQC,MAAQ,KAKpB,8BAAWC,IAAKR,EAAaS,UAAU,EAAMrE,UAAU,iBAEvD,4BAAQM,KAAK,SAASN,UAAU,wBAAhC,gBCvBT,SAASsE,EAAiB3E,GAAQ,IAAD,EAEFuB,mBAAS,IAFP,mBAE7B2B,EAF6B,KAElB0B,EAFkB,KAG9BC,EAA8B,UAAnB7E,EAAM6E,SAQvB,OAAO,yBAAKxE,UAAWL,EAAMK,WACxBwE,GAAY,kBAACb,EAAD,CAAaI,SAPP,SAACZ,GACtB,IAAIsB,EAAa,YAAO5B,GACxB4B,EAAcpB,QAAQF,GACtBoB,EAAaE,IAIyCzE,UAAU,gBAC9D,kBAACoC,EAAD,eAAYS,UAAWA,GAAelD,KAIvC,SAAS+E,EAAqB/E,GAAQ,IACpCe,EAAWf,EAAXe,QADmC,EAERQ,oBAAS,GAFD,mBAEnCyD,EAFmC,KAExBC,EAFwB,OAGhB1D,mBAAS,MAHO,mBAGnCtB,EAHmC,KAG5BiF,EAH4B,KAKpC1E,EAAuB,SAACd,EAAUC,GACrB,MAAXA,EACFuF,EAASxF,GAET4D,MAAM,wBAWZ,OARAN,qBAAU,WJjBkB,IAAmB/E,GImB5B,IAAd+G,IJnB0C/G,EIoBnBuC,EJnB1B1C,EAAc,MAAD,kBImBIiD,GJnB2B9C,GIoB1CgH,GAAa,MAEd,CAAClE,EAASiE,EAAWC,IAEP,OAAVhF,EAAiB,KAAO,kBAACmB,EAAD,CAAOnB,MAAOA,EAAOI,UAAWL,EAAMK,YCVxD8E,MA1Bf,WAGE,OACE,yBAAK9E,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAK+E,IAAKC,IAAMhF,UAAU,WAAWiF,IAAI,SACzC,mCACO,4CADP,wBAGA,6BACE,kBAACX,EAAD,OAEF,uBACEtE,UAAU,WACVmC,KAAK,sBACL+C,OAAO,SACPC,IAAI,uBAJN,kBCTYC,QACW,cAA7B9D,OAAOC,SAAS8D,UAEe,UAA7B/D,OAAOC,SAAS8D,UAEhB/D,OAAOC,SAAS8D,SAAS3D,MACvB,2DCXN,IAAM4D,EAAQ7G,SAAS8G,eAAe,QAElCD,GACFE,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFJ,GAIJ,IAAM9F,EAAIqE,IAAM8B,cAEVC,EAASnH,SAAS8G,eAAe,WAEnCK,GACFJ,IAASC,OAAOjG,EAAE8E,EAAkBsB,EAAQC,SAC1CD,GAKJ,IAAME,EAAsBrH,SAASsH,iBAAiB,mBAMtDD,EAAoBE,SAAQ,SAAAC,GAC1BT,IAASC,OAAOjG,EAAEkF,EAAsBuB,EAAUJ,SAAUI,MD+FxD,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrG,QAAQqG,MAAMA,EAAMC,c","file":"static/js/main.42e8aab6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\n  var cookieValue = null;\n  if (document.cookie && document.cookie !== '') {\n    var cookies = document.cookie.split(';');\n    for (var i = 0; i < cookies.length; i++) {\n      var cookie = cookies[i].trim();\n      // Does this cookie string begin with the name we want?\n      if (cookie.substring(0, name.length + 1) === (name + '=')) {\n        cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n        break;\n      }\n    }\n  }\n  return cookieValue;\n}\n\nexport function backendLookup(method, endpoint, callback, data) {\n  let jsonData;\n\n  if (data){\n    jsonData = JSON.stringify(data)\n  }\n  const url = `http://localhost:8000/api${endpoint}`\n  const xhr = new XMLHttpRequest()\n  xhr.responseType ='json'\n  xhr.open(method, url)\n  const csrftoken = getCookie('csrftoken')\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\")\n\n  if (csrftoken && method === 'POST') {\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\n    xhr.setRequestHeader(\"X-CSRFTOKEN\", csrftoken)\n\n  }\n  xhr.onload = function() {\n    callback(xhr.response, xhr.status)\n  }\n  xhr.onerror = function(e) {\n    callback({\"message\": \"There was an error\"}, 400)\n  }\n  xhr.send(jsonData)\n}","import React from 'react'\nimport {apiTweetAction} from './lookup'\n\n\nexport function ActionBTN(props) {\n    const {tweet, action, didPerformAction} = props \n    const likes = tweet.likes ? tweet.likes : 0\n\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n\n    const handleServerResponse = (response, status) => {\n      console.log(response)\n      console.log(status)\n      if ((status === 200 || status ===201) && didPerformAction) {\n        didPerformAction(response, status)\n      }\n    }\n\n    const handleClick = (event) => {\n        event.preventDefault()\n        apiTweetAction(tweet.id, action.type, handleServerResponse)\n        console.log(action.type)\n    }\n\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n\n    return <button className={className} onClick={handleClick}> {display} </button>\n  }","import {backendLookup} from '../lookup'\n\nexport const apiTweetCreate = function (newTweet, callback) {\n    backendLookup(\"POST\", \"/tweets/create/\", callback, {content: newTweet})\n  }\n\nexport const apiTweetAction = function(tweetId, action, callback) {\n    const data = {id: tweetId, action: action}\n    backendLookup('POST', '/tweets/action/', callback, data)   \n}\n  \nexport const apiTweetList = function(username, callback) {\n    let endpoint = \"/tweets\"\n    if (username) {\n        endpoint = `/tweets/?username=${username}`\n    }\n    backendLookup('GET', endpoint, callback)  \n}\n\nexport const apiTweetDetail = function(tweet_id, callback) {\n    backendLookup('GET', `/tweets/${tweet_id}`, callback)  \n}\n","import React, {useState} from 'react'\nimport {ActionBTN} from './buttons'\n\nexport function ParentTweet(props) {\n    const {tweet} = props\n    return tweet.parent ? <div className='row'>\n      <div className='col-11 mx-auto p-3 border rounded'>\n        <p className='mb-0 text-muted small'>Retweet</p>\n        <Tweet hideActions className={' '} tweet={tweet.parent}/>\n      </div> \n  </div> : null\n  }\n  \n  export function Tweet(props) {\n    const {tweet, didRetweet, hideActions}  = props\n    const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null)\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    const likeAction = {type: \"like\", display:\"Likes\"}\n    const unlikeAction = {type: \"unlike\", display:\"Unlikes\"}\n    const retweetAction = {type: \"retweet\", display:\"Retweet\"}\n\n    const path = window.location.pathname\n    var idRegex = /(?<tweetid>\\d+)/\n    const match = path.match(idRegex)\n    const urlTweetId = match ? match.groups.tweetid : -1\n\n\n    const isDetail = `${tweet.id}` === `${urlTweetId}`\n  \n\n    const handleLink = (event) => {\n        event.preventDefault()\n        window.location.href = `/${tweet.id}`\n    }\n\n    const handlePerformAction = (newActionTweet, status) => {\n      if (status === 200) {\n        setActionTweet(newActionTweet)\n      } else if (status === 201) {\n        if (didRetweet) {\n          didRetweet(newActionTweet)\n        }\n      }\n    }\n\n    return <div className = {className}>\n      <div>\n        <p>{tweet.id} - {tweet.content}</p>\n        <ParentTweet tweet={tweet} />\n      </div>\n       <div className='btn btn-group'>\n       {(actionTweet && hideActions !== true) &&  <React.Fragment>\n            <ActionBTN tweet={actionTweet} didPerformAction={handlePerformAction}  action={likeAction} />\n            <ActionBTN tweet={actionTweet} didPerformAction={handlePerformAction}  action={unlikeAction} />\n            <ActionBTN tweet={actionTweet} didPerformAction={handlePerformAction}  action={retweetAction} />\n            </React.Fragment> \n       }\n        {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\n\n      </div>\n    </div>\n  }","import React, {useEffect, useState} from 'react'\nimport {apiTweetList} from './lookup'\nimport {Tweet} from './detail'\n\n export function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n    const [tweetsDidSet, setTweetsDidSet] = useState(false)\n\n    useEffect(()=>{\n        let final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length){\n            setTweets(final)\n        }\n\n    }, [props.newTweets, tweets, tweetsInit])\n  \n    useEffect(() => {\n      //perform lookup\n      if (tweetsDidSet === false) {\n        const handleTweetListResponse  = (response, status) => {\n          if (status === 200) {\n              setTweetsInit(response)\n              setTweetsDidSet(true)\n          } else{\n            alert(\"There was an error\")\n          }\n        }\n        apiTweetList(props.username, handleTweetListResponse)\n    }\n    }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username])\n\n    const handleDidRetweet = (newTweet) => {\n      const updatedTweetsInit = [...tweetsInit]\n      updatedTweetsInit.unshift(newTweet)\n      setTweetsInit(updatedTweetsInit)\n\n      const updateFinalTweets = [...tweets]\n      updateFinalTweets.unshift(newTweet)\n      setTweets(updateFinalTweets)\n    }\n  \n    return tweets.map((item, index)=>  {\n      return <Tweet \n      tweet={item} \n      didRetweet={handleDidRetweet}\n      className=\"my-5 py-5 border bg-white text-dark\" key={`${index}--{item.id}`}/>\n    })\n  \n  }","import React from 'react'\nimport {apiTweetCreate} from './lookup'\n\nexport function TweetCreate(props) {\n  const textAreaRef = React.createRef()\n  const {didTweet} = props\n\n    const handleServerResponse = (response, status) => {\n      // Service response handler\n      if (status === 201) {\n        didTweet(response)\n      } else {\n        console.log(response)\n        alert(\"An error occured\")\n      }\n    }\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        const newVal = textAreaRef.current.value \n        // Perform backend request\n        apiTweetCreate(newVal, handleServerResponse)\n  \n        textAreaRef.current.value = ''\n    }\n\n    return <div className={props.className}>\n            <form onSubmit={handleSubmit}>\n                <textarea  ref={textAreaRef} required={true} className='form-control'>\n                </textarea>\n                <button type='submit' className='btn btn-primary my-3'> Tweet Now</button>\n            </form>\n        </div>\n}\n\n\n","import React, {useEffect, useState} from 'react'\nimport {TweetsList} from './list'\nimport {TweetCreate} from './create'\nimport {apiTweetDetail} from './lookup'\nimport {Tweet} from './detail'\n\n\nexport function TweetsComponents(props) {\n\n    const [newTweets, setNewTweets] = useState([])\n    const canTweet = props.canTweet === \"false\" ? false : true\n\n    const handleNewTweet = (newTweet) => {\n      let tempNewTweets = [...newTweets]\n      tempNewTweets.unshift(newTweet)\n      setNewTweets(tempNewTweets)\n    }\n\n    return <div className={props.className}>\n        {canTweet && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3'/>}\n        <TweetsList newTweets={newTweets} {...props}/>\n    </div> \n}\n\nexport function TweetDetailComponent(props) {\n  const {tweetId} = props\n  const [didLookup, setDidLookUp] = useState(false)\n  const [tweet, setTweet] = useState(null)\n\n  const handleServerResponse = (response, status) => {\n      if (status === 200) {\n        setTweet(response)\n      } else {\n        alert(\"Error finding tweet\")\n      }\n  }\n  useEffect(()=>{\n\n    if(didLookup === false){\n      apiTweetDetail(tweetId, handleServerResponse)\n      setDidLookUp(true)\n    }\n  }, [tweetId, didLookup, setDidLookUp])\n\n  return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\n}\n\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponents} from './tweets'\n\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponents />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponents, TweetDetailComponent} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\n\nif (appEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\n\nconst e = React.createElement\n\nconst tweetEl= document.getElementById('tweetme')\n\nif (tweetEl) {\n  ReactDOM.render(e(TweetsComponents, tweetEl.dataset),\n    tweetEl\n  );\n}\n\n\nconst tweetDetailElements = document.querySelectorAll('.tweetme-detail')\n\nif (tweetDetailElements) {\n\n}\n\ntweetDetailElements.forEach(container => {\n  ReactDOM.render(e(TweetDetailComponent, container.dataset), container );\n})\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}