{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponents","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","console","log","current","value","newVal","tempNewTweets","unshift","content","likes","id","ref","required","type","TweetsList","ActionBTN","tweet","action","setLikes","userLike","setuserLike","actionDisplay","display","onClick","Tweet","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","e","send","loadTweets","alert","map","item","index","key","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b2bf4e77.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {useEffect, useState} from 'react'\nimport {loadTweets} from '../lookup'\n\nexport function TweetsComponents(props) {\n\n\n    const textAreaRef = React.createRef()\n\n    const [newTweets, setNewTweets] = useState([])\n\n    const handleSubmit = (event) => {\n        event.preventDefault()\n        console.log(event)\n        console.log(textAreaRef.current.value)\n        const newVal = textAreaRef.current.value \n        let tempNewTweets = [...newTweets]\n        tempNewTweets.unshift({\n            content: newVal,\n            likes:0,\n            id:newVal.id\n        })\n        setNewTweets(tempNewTweets)\n        textAreaRef.current.value = ''\n    }\n\n    return <div className={props.className}>\n        <div className='col-12 mb-3'>\n            <form onSubmit={handleSubmit}>\n                <textarea  ref={textAreaRef} required={true} className='form-control'>\n                </textarea>\n                <button type='submit' className='btn btn-primary my-3'> Tweet Now</button>\n            </form>\n        </div>\n        <TweetsList newTweets={newTweets}/>\n    </div> \n}\n\nexport function ActionBTN(props) {\n    const {tweet, action} = props \n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0)\n    const [userLike, setuserLike] = useState(tweet.userLike === true ? true : false)\n\n    const className = props.className ? props.className : 'btn btn-primary btn-sm'\n    const actionDisplay = action.display ? action.display : 'Action'\n    const handleClick = (event) => {\n        event.preventDefault()\n        console.log(\"Here\")\n        console.log(action.type)\n        if(action.type === 'like') {\n            if(userLike === true) {\n                setLikes(likes - 1)\n                setuserLike(!userLike)\n            } else {\n                setLikes(likes + 1)\n                setuserLike(true)\n            }\n        }\n    }\n\n    const display = action.type === 'like' ? `${likes} ${actionDisplay}` : actionDisplay\n\n    return <button className={className} onClick={handleClick}> {display} </button>\n  }\n  \n  \n  export function Tweet(props) {\n    const {tweet} = props\n    const className = props.className ? props.className : 'col-10 mx-auto col-md-6'\n    const likeAction = {type: \"like\", display:\"Likes\"}\n    const unlikeAction = {type: \"unlike\", display:\"Unlikes\"}\n    const retweetAction = {type: \"retweet\", display:\"Retweet\"}\n\n\n    return <div className = {className}>\n      <p>{tweet.id} - {tweet.content}</p>\n      <div className='btn btn-group'>\n        <ActionBTN tweet={tweet} action={likeAction} />\n        <ActionBTN tweet={tweet} action={unlikeAction} />\n        <ActionBTN tweet={tweet} action={retweetAction} />\n\n      </div>\n    </div>\n  }\n\n  \n export function TweetsList(props) {\n    const [tweetsInit, setTweetsInit] = useState([])\n    const [tweets, setTweets] = useState([])\n\n    console.log(props.newTweets)\n\n    useEffect(()=>{\n        let final = [...props.newTweets].concat(tweetsInit)\n        if (final.length !== tweets.length){\n            setTweets(final)\n        }\n\n\n    }, [props.newTweets, tweets, tweetsInit])\n  \n    useEffect(() => {\n      //perform lookup\n      const myCallBack  = (response, status) => {\n        if (status === 200) {\n            setTweetsInit(response)\n        } else{\n          alert(\"There was an error\")\n        }\n      }\n      loadTweets(myCallBack)\n    }, [])\n  \n    return tweets.map((item, index)=>  {\n      return <Tweet tweet={item} className=\"my-5 py-5 border bg-white text-dark\" key={`${index}--{item.id}`}/>\n    })\n  \n  }","export const loadTweets = function(callback) {\n    const method = 'GET'\n    const url = \"http://localhost:8000/api/tweets/\"\n    const responseType = 'json'\n    const xhr = new XMLHttpRequest()\n    xhr.responseType = responseType\n    xhr.open(method, url)\n    xhr.onload = function() {\n      callback(xhr.response, xhr.status)\n    }\n    xhr.onerror = function(e) {\n      console.log(e)\n      callback({\"message\": \"There was an error\"}, 400)\n    }\n    xhr.send()\n  \n  }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport {TweetsComponents} from './tweets'\n\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponents />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {TweetsComponents} from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root')\n\nif (appEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\n\nconst tweetEl= document.getElementById('tweetme')\n\nif (tweetEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <TweetsComponents />\n    </React.StrictMode>,\n    tweetEl\n  );\n}\n\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}